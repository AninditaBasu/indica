openapi: 3.0.0

info:
  version: 2.0.0
  title: Rig Veda API
  description: '## Metadata of the poetry in the Rig Veda 
  
  This API returns verse-by-verse info on poets, gods, their categories, and the meters.'
  contact:
    email: ab.techwriter@gmail.com 
  license:
    name: MIT license
    url: https://opensource.org/licenses/MIT

externalDocs:
  description: Rig Veda API reference
  url: https://aninditabasu.github.io/indica/api_rv/


servers:
- url: https://api-rv.herokuapp.com/rv/v2/meta/
  description: Offline every night 12 hours from 9 PM IST
  
paths:
  /mandal/{mandal_number}:
    get:
      summary: Find mandal by number
      description: 'Returns the metadata of all verses in the specified mandal.
      
      For example, `4` returns the metadata of the verses in the 4th mandal.'  
      parameters:
        - name: mandal_number
          in: path
          required: true
          description: Book number
          schema:
            type: integer
            enum:
              - 1
              - 2
              - 3
              - 4
              - 5
              - 6
              - 7
              - 8
              - 9
              - 10
      responses:
        '200':
          description: Returned a list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meta'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:   
                  message:
                    type: string

  /sukta/{sukta_number}:
    get:
      summary: Find sukta by number
      description: 'Returns the metadata of all verses for the specified sukta from all mandals.
      
      For example, `23` returns the metadata for all suktas numbered 23 from all the 10 mandals.'
      parameters:
        - name: sukta_number
          in: path
          required: true
          description: Chapter number
          schema:
            type: integer
            minimum: 1
            maximum: 191
      responses:
        '200':
          description: Returned a list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meta'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:   
                  message:
                    type: string

  /meter/{meter}:
    get:
      summary: Find all verses in a poetic meter
      description: 'Returns the metadata of all verses in the specified poetic meter, for example, `gayatri`.
      
      Can take partial strings. For example, `tup` returns the metadata for all verses written in any meter that has `tup` in its name, such as `Anushtup` and `Trishtup`.
      
       Is not case sensitive. For example, the input `tup` is treated to be the same as `Tup`, `tUp`, or `TUP`.'
      parameters:                    
        - name: meter
          in: path
          description: Poetic meter
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returned a list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meta'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:   
                  message:
                    type: string

  /sungby/{sungby}:
    get:
      summary: Find all verses by a singer
      description: 'Returns the metadata of all verses by the specified singer, for example, `Bharadwaj`.
      
      Can take partial strings. For example, `tra` returns the metadata of all verses composed by any singer whose name contains `tra`, such as `Vishwamitra` and `Vasishth Maitravaruni`.
      
       Is not case sensitive. For example, the input `tra` is treated to be the same as `Tra`, `tRa`, or `TRA`.'  
      parameters:   
        - name: sungby
          in: path
          description: Name of the poet
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returned a list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meta'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:   
                  message:
                    type: string

  /sungbycategory/{sungbycategory}:
    get:
      summary: Find all verses by a category of singers
      description: 'Returns the metadata of all verses where the singer belongs to the specified category.'
      parameters: 
        - name: sungbycategory
          in: path
          description: Category of the singer of the verse.
          required: true
          schema:
            type: string
            enum:
              - animal
              - demon male
              - divine female
              - divine male
              - human female
              - human male
      responses:
        '200':
          description: Returned a list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meta'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:   
                  message:
                    type: string

  /sungfor/{sungfor}:
    get:
      summary: Find all verses addressed to someone
      description: 'Returns the metadata of all verses sung for the specified god, human, or object, for example `Agni` or `plough`
      
      Can take partial strings. For example, `ni` returns all venerated beings or objects whose name contains `ni`, such as `Nirriti` (god), `Maitravaruni` (human), or `Sinivali` (abstract thing).
      
       Is not case sensitive. For example, the input `agni` is treated to be the same as `Agni`, `AGNI`, or `aGnI`.'
      parameters:
        - name: sungfor
          in: path
          description: Name of the subject of the verse
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returned a list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meta'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:   
                  message:
                    type: string

  /sungforcategory/{sungforcategory}:
    get:
      summary: Find all verses sung for a category
      description: Returns metadata of the verses where the subject belongs to the specified category.
      parameters:    
        - name: sungforcategory
          in: path
          description: Category of the subject of the verse
          required: true
          schema:
            type: string
            enum:
              - animal
              - demon male
              - divine female
              - divine human
              - divine male
              - human couple
              - human female
              - human male
              - human unborn
              - object
              - plant
      responses:
        '200':
          description: Returned a list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meta'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:   
                  message:
                    type: string

components:
  schemas:
    Meta:
      type: object
      properties:
        mandal:
          type: integer
          description: Book number
        sukta:
          type: integer
          description: Chapter number
        meter:
          type: string
          description: Poetic meter
        sungby:
          type: string
          description: Name of the singer
        sungbycategory:
          type: string
          description: Category the singer belongs to
        sungfor:
          type: string
          description: Whomsoever the singer is singing to
        sungforcategory:
          type: string
          description: Category of whomsoever the singer is singing to