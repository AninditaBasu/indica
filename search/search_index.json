{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Indica APIs","text":"<p>The Indica APIs give you JSON dictionaries of data from ancient India.</p> <p>Do we know what life was like in ancient India? That depends. To begin with, <code>ancient</code> itself is open to several definitions. And secondly, our knowledge of the past is fragmented. We know about ancient India through its songs and stories, transmitted orally for the most part from one generation to the next.</p> <p>Indologists have sifted through these oral traditions and compiled scholarly books. But, this treasure chest isn't available in a machine-readable, interoperable form. </p> <p>These APIs aim to bridge that gap. The APIs speak in JSON, which is a language notation that's understood by almost all machines today.</p> Available In the works On the roadmap  <ul> <li>Rig Veda API</li> <li>Vedic Society API</li> </ul> <ul> <li>Mahabharat API: A query service is up but not the API yet.</li> </ul> <ul> <li>Arthashashtra API</li> <li>Ashokan edicts API</li> </ul>"},{"location":"#authentication","title":"Authentication","text":"<p>Not needed. These are open APIs.</p>"},{"location":"#license","title":"License","text":"<p>These APIs are distributed under the MIT license. This means you are free to use the data any which way you want, so long as you don't hold me liable and you give me an attribution. See The MIT License (MIT).</p> <p>All content on this website, unless otherwise stated, is distributed under the Creative Commons license. This means the content is dedicated as-is, without any liability, to the worldwide public domain. See The Creative Commons Zero v1.0 Universal license.</p>"},{"location":"#rate-limits","title":"Rate limits","text":"<p>The APIs are hosted on Heroku, where I have a limit of 500 hours a month. This limit includes all my apps hosted on Heroku (I have other apps there besides these APIs). I am neither tracking who makes how many calls to the APIs nor throttling calls on IP-address basis. My only request is, call these APIs in a fair manner so that I have some hours always available to run my other projects.</p> <p>Heavy use</p> <p>If you need to use the APIs rather heavily, please let me know. I'll generate for you a free token, which will give you access to an authenticated hosting service that I also use. This authenticated service has a rate limit of 10,000 API calls a month for free accounts.</p>"},{"location":"#release-history","title":"Release history","text":"Rig Veda APIVedic Society APIMahabharat query service <ul> <li>2.0 (July 2022)<ul> <li>Deprecated all query parameters</li> <li>Introduced the following path parameters:<ul> <li><code>/book/{mandal}</code></li> <li><code>/meter/{meter}</code></li> <li><code>/poet/{sungby}</code></li> <li><code>/poetcategory/{poetcategory}</code></li> <li><code>/god/{sungfor}</code></li> <li><code>/god/{sungfor}/{mandal}</code></li> <li><code>/godbypoet/{sungfor}/{sungby}</code></li> <li><code>/godcategory/{sungforcategory}</code></li> <li><code>/godcategorybypoetcategory/{sungforcategory}/{sungbycategory}</code></li> </ul> </li> <li>Changed the endpoint to <code>https://api-rv.herokuapp.com/rv/v2/meta/</code></li> </ul> </li> <li>1.2 (December 2020)<ul> <li>Changed the endpoint to <code>https://api-rv.herokuapp.com/rv/v1</code></li> </ul> </li> <li>1.1 (October 2018)<ul> <li>Changed the endpoint from <code>https://sheetlabs.com/RV/</code> to <code>https://sheetlabs.com/IND/</code></li> <li>Added the following two parameters: <code>sungbycategory</code> and <code>sungforcategory</code></li> </ul> </li> <li>1.0 (August 2018)<ul> <li>First release</li> </ul> </li> </ul> <ul> <li>2.0 (July 2022)<ul> <li>Deprecated all query parameters</li> <li>Introduced the following path parameters:<ul> <li><code>/words/{word}</code></li> <li><code>/descriptions/{description}</code></li> <li><code>/categories/{category}</code></li> </ul> </li> <li>Changed the endpoint to <code>https://api-vs.herokuapp.com/vs/v2/</code></li> </ul> </li> <li>1.2 (December 2020)<ul> <li>Changed the endpoint to <code>https://api-vs.herokuapp.com/vs/v1</code></li> </ul> </li> <li>1.1 (October 2018)<ul> <li>Changed the endpoint from <code>https://sheetlabs.com/RV/</code> to <code>https://sheetlabs.com/IND/</code></li> </ul> </li> <li>1.0 (August 2018)<ul> <li>First release</li> </ul> </li> </ul> <ul> <li>Beta (April 2020)</li> </ul>"},{"location":"#coffee-chat","title":"Coffee chat","text":"Why did you make these APIs? <p>Because they weren't there.</p> What can I do with this data? <p>You can process the data to make visually appealing or easily consumable information. Some examples are at HowTo-s and dataviz.</p> <p>Also, I'll be very happy to link back to your implementation or app if you send me a URL.</p> What is the source of this data? <p>See About the Rig Veda API, About the Vedic Society API, and About the Mahabharat query service.</p> I found an error in the data. <p>Please log an issue in these GitHub repositories:</p> <ul> <li>Rig Veda API and Vedic Society API</li> <li>Mahabharat query service</li> </ul> And you are...? <p>Anindita Basu.</p> <p></p>"},{"location":"about_mb/","title":"About the Mahabharat query service","text":"<p>The Bengal version of the Mahabharat, as translated by Kisari Mohan Ganguli, is followed. </p> <p>The data is from the following books: </p> <ul> <li>The Mahabharata of Vyasa (K M Ganguli)</li> <li>Puranic Encyclopedia (Vettam Mani)</li> <li>Mahabharata: A Cultural Index (M A Mehendale)</li> <li>Index to the Names in the Mahabharata (Sorensen)</li> <li>A Classical Dictionary of Hindu Mythology and Religion (John Dowson)</li> </ul> <p></p>"},{"location":"about_rv/","title":"About the Rig Veda API","text":"<p>This API contains metadata from Rig Veda Samhita. Data from the other three samhitas (Yajurveda, Samaveda, and Atharvaveda) are not included, because most of the verses in these three samhitas are a repetition of the verses in Rig Veda Samhita. </p> <p>The data is from the following books: </p> <ul> <li>Rig Veda Samhita, the English translation according to H. H. Wilson and the Bhashya of Sayanacharya, by Ravi Prakash Arya and K. L. Joshi (Volumes 1 through 4)</li> <li>The Practical Sanskrit-English Dictionary, by V. S. Apte</li> </ul> <p>The data is returned in the following format:</p> SchemaExample response <pre><code>{\n  \"mandal\": 0,\n  \"sukta\": 0,\n  \"meter\": \"string\",\n  \"sungby\": \"string\",\n  \"sungbycategory\": \"string\",\n  \"sungfor\": \"string\",\n  \"sungforcategory\": \"string\"\n}\n</code></pre> <pre><code>{\n    \"mandal\": 10,\n    \"meter\": \"Jagati\",\n    \"sukta\": 75,\n    \"sungby\": \"Sindhukshit Praiyamedh\",\n    \"sungbycategory\": \"human male\",\n    \"sungfor\": \"Ganga\",\n    \"sungforcategory\": \"divine female\"\n}\n</code></pre> <p>In Rig Veda, books (or mandals) contain chapters, and chapters (or suktas) contain verses (or richas). A book has several chapters. A sukta has several verses. Within a sukta, each verse can be in different meter and addressed to more than one god. Within a sukta, the verses can be composed by more than one poet. See the following entity-relationship diagram.</p> <pre><code>erDiagram\n  Mandal ||--|{ Sukta : contains\n  Sukta ||--|{ verse : contains\n  verse ||--|| poet : is_sung_by\n  verse ||--|| meter : is_in\n  verse ||--|{ god : is_sung_for</code></pre> <p>Rig Veda API fetches the metadata of verses and, therefore, contains a separate entry for each of these possibilities wherever they occur.</p> <p>For example, consider sukta 24 of mandal 1. It has verses addressed to five gods, all in different meters. The API response for the verses in this mandal-sukta combination is something like this:</p> <pre><code>  {\n    \"mandal\": 1,\n    \"sukta\": 24,\n    \"sungby\": \"Shunahshep Ajigarti\",\n    \"sungbycategory\": \"human male\",\n    \"sungfor\": \"Ka\",\n    \"sungforcategory\": \"divine male\",\n    \"meter\": \"Trishtup\"\n  },\n  {\n    \"mandal\": 1,\n    \"sukta\": 24,\n    \"sungby\": \"Shunahshep Ajigarti\",\n    \"sungbycategory\": \"human male\",\n    \"sungfor\": \"Agni\",\n    \"sungforcategory\": \"divine male\",\n    \"meter\": \"Trishtup\"\n  },\n  {\n    \"mandal\": 1,\n    \"sukta\": 24,\n    \"sungby\": \"Shunahshep Ajigarti\",\n    \"sungbycategory\": \"human male\",\n    \"sungfor\": \"Savita\",\n    \"sungforcategory\": \"divine male\",\n    \"meter\": \"Gayatri\"\n  },\n  {\n    \"mandal\": 1,\n    \"sukta\": 24,\n    \"sungby\": \"Shunahshep Ajigarti\",\n    \"sungbycategory\": \"human male\",\n    \"sungfor\": \"Bhaga\",\n    \"sungforcategory\": \"divine male\",\n    \"meter\": \"Gayatri\"\n  },\n  {\n    \"mandal\": 1,\n    \"sukta\": 24,\n    \"sungby\": \"Shunahshep Ajigarti\",\n    \"sungbycategory\": \"human male\",\n    \"sungfor\": \"Varun\",\n    \"sungforcategory\": \"divine male\",\n    \"meter\": \"Trishtup\"\n  }\n</code></pre>"},{"location":"about_rv/#related","title":"Related","text":"<ul> <li>Rig Veda API reference</li> <li>Tutorial: Vedic soliloquies</li> <li>Tutorial: Vedic dialogues</li> <li>Dataviz: Meters pie chart</li> </ul>"},{"location":"about_vs/","title":"About the Vedic Society API","text":"<p>This API contains the meanings of all nouns, except proper nouns, from the entire vedic corpus. Vedic literature comprises four vedas (Rig, Sama, Yajur, and Atharv). Each veda is a set of these articles:</p> <ul> <li>Samhitas: Hymns or songs to gods</li> <li>Brahmanas: Instructions on rituals</li> <li>Upanishads: Philosophical discourses</li> </ul> <p>All of these are reckoned for this API. The data is from the following books: :</p> <ul> <li>Vedic Index of Names and Subjects, by A. A. Macdonell and A. B. Keith (Volume 1 and Volume 2)</li> <li>Vedic Mythology, by A. A. Macdonell</li> <li>The Nighantu and the Nirukta of Sri Yaskacharya, by Lakshman Sarup</li> <li>The Practical Sanskrit-English Dictionary, by V. S. Apte</li> </ul> <p>The data is returned in the following format:</p> SchemaExample response <pre><code>{\n  \"nagari\": \"string\",\n  \"word\": \"string\",\n  \"description\": \"string\",\n  \"category\": \"string\"\n}\n</code></pre> <pre><code>{\n    \"category\": \"law\",\n    \"description\": \"thief\",\n    \"nagari\": \"\u0924\u093e\u092f\u0941\",\n    \"word\": \"tayu\"\n}\n</code></pre> <p>The nouns are categorised into flora, fauna, geography, food, relationships, and more groups. The JSON response contains the word in the Nagari script, the word transliterated into the Roman script, the meaning of the word, and the category the word belongs to.</p>"},{"location":"about_vs/#related","title":"Related","text":"<ul> <li>Vedic Society API reference</li> <li>Tutorial: Vedic curses</li> <li>Dataviz: Word cloud</li> </ul>"},{"location":"api_rv/","title":"Rig Veda API reference","text":"<p>This API fetches metadata of the hymns in Rig Veda. The JSON response contains verse-by-verse information on poets, gods, their categories, and the poetic meters.</p> <pre><code>[\n  {\n    \"mandal\": 1,\n    \"meter\": \"Gayatri\",\n    \"sukta\": 1,\n    \"sungby\": \"Madhuchchhanda Vaishwamitra\",\n    \"sungbycategory\": \"human male\",\n    \"sungfor\": \"Agni\",\n    \"sungforcategory\": \"divine male\"\n  }\n]\n</code></pre> <p>Timeout</p> <p>This API is offline since 28 Nov 2022, when Heroku pulled its free plan, and will remain offline till I find something else. The sandbox won't work, therefore.</p>"},{"location":"api_rv/#context","title":"Context","text":"<p>An explanation of the various elements in Rig Veda (and this API) is contained in About the Rig Veda API.</p>"},{"location":"api_rv/#base-url","title":"Base URL","text":"<p><code>https://api-rv.herokuapp.com/rv/v2/meta/</code></p> <p>The request URL is formed by appending an endpoint to the base URL.</p>"},{"location":"api_rv/#methods","title":"Methods","text":"<p>Only <code>GET</code> calls are supported.</p> Example requestExample response <p>For the request parameters, see Endpoints.</p> <pre><code>curl -X 'GET' \\\n    'https://api-rv.herokuapp.com/rv/v2/meta/god/ganga' \\\n    -H 'accept: application/json'\n</code></pre> <p>For the response parameters, see Response parameters.</p> <pre><code>[\n{\n    \"mandal\": 10,\n    \"meter\": \"Jagati\",\n    \"sukta\": 75,\n    \"sungby\": \"Sindhukshit Praiyamedh\",\n    \"sungbycategory\": \"human male\",\n    \"sungfor\": \"Ganga\",\n    \"sungforcategory\": \"divine female\"\n  }\n]\n</code></pre>"},{"location":"api_rv/#endpoints","title":"Endpoints","text":"<p>All parameters are path parameters. To form the request URL, the endpoint must be appended to the base URL.</p> <pre><code>request URL = base URL + endpoint\n</code></pre> <p>The following endpoints are available. </p>"},{"location":"api_rv/#bookmandal","title":"<code>/book/{mandal}</code>","text":"<p>Returns the metadata of all verses in the specified mandal. For example, <code>/book/4</code> returns the metadata of all of the verses in the 4th book.</p> <p><code>{mandal}</code> is an integer parameter.</p> <p>Valid values for this parameter are 1 through 10 (because there are only 10 books in Rig Veda).</p>"},{"location":"api_rv/#metermeter","title":"<code>/meter/{meter}</code>","text":"<p>Returns the metadata of all verses in the specified poetic meter. For example <code>/meter/tup</code> returns the metadata for all verses written in any meter that has <code>tup</code> in its name, such as <code>Anushtup</code> and <code>Trishtup</code>.</p> <p><code>{meter}</code> is a string parameter.</p>"},{"location":"api_rv/#poetsungby","title":"<code>/poet/{sungby}</code>","text":"<p>Returns the metadata of all verses by the specified poet. For example, <code>/poet/tra</code> returns the metadata of all verses composed by any poet whose name contains <code>tra</code>, such as <code>Vishwamitra</code> and <code>Vasishth Maitravaruni</code>.</p> <p><code>{sungby}</code> is a string parameter.</p>"},{"location":"api_rv/#poetcategorypoetcategory","title":"<code>/poetcategory/{poetcategory}</code>","text":"<p>Returns the metadata of all verses where the poet belongs to the specified category. The following categories are available:</p> <ul> <li><code>animal</code></li> <li><code>demon male</code></li> <li><code>divine female</code></li> <li><code>divine male</code></li> <li><code>human female</code></li> <li><code>human male</code></li> </ul> <p><code>{poetcategory}</code> is a string parameter. </p>"},{"location":"api_rv/#godsungfor","title":"<code>/god/{sungfor}</code>","text":"<p>Returns the metadata of all verses sung for the specified venerated being or object. For example, <code>/god/ni</code> returns all venerated beings or objects whose name contains <code>ni</code>, such as <code>Nirriti</code> (god), <code>Maitravaruni</code> (human), or <code>Sinivali</code> (abstract thing).</p> <p><code>{sungfor}</code> is a string parameter.</p>"},{"location":"api_rv/#godsungformandal","title":"<code>/god/{sungfor}/{mandal}</code>","text":"<p>Returns the metadata of all verses in a book that are sung for the specified venerated being or object. For example, <code>/god/agni/1</code> returns the metadata of all verses to Agni in book 1.</p> <p><code>{sungfor}</code> is a string parameter and <code>{mandal}</code> an integer parameter.</p>"},{"location":"api_rv/#godbypoetsungforsungby","title":"<code>/godbypoet/{sungfor}/{sungby}</code>","text":"<p>Returns the metadata of all verses sung for the specified venerated being or object (for example <code>Agni</code> or <code>plough</code>) by the specified poet (for example, <code>Vasishth</code>).</p> <p><code>{sungfor}</code> and <code>{sungby}</code> are string parameter.</p>"},{"location":"api_rv/#godcategorysungforcategory","title":"<code>/godcategory/{sungforcategory}</code>","text":"<p>Returns metadata of all verses where a venerated being or object belongs to the specified category. The following categories are available:</p> <ul> <li><code>abstract</code></li> <li><code>animal</code></li> <li><code>demon male</code></li> <li><code>divine female</code></li> <li><code>divine human</code></li> <li><code>divine male</code></li> <li><code>human couple</code></li> <li><code>human female</code></li> <li><code>human male</code></li> <li><code>human unborn</code></li> <li><code>object</code></li> <li><code>plant</code></li> </ul> <p><code>{sungforcategory}</code> is a string parameter.</p>"},{"location":"api_rv/#godcategorybypoetcategorysungforcategorysungbycategory","title":"<code>/godcategorybypoetcategory/{sungforcategory}/{sungbycategory}</code>","text":"<p>Returns metadata of all verses where the venerated being or object, and the poet, belong to specified categories. The following categories are available:</p> categories of godscategories of poets <ul> <li><code>abstract</code></li> <li><code>animal</code></li> <li><code>demon male</code></li> <li><code>divine female</code></li> <li><code>divine human</code></li> <li><code>divine male</code></li> <li><code>human couple</code></li> <li><code>human female</code></li> <li><code>human male</code></li> <li><code>human unborn</code></li> <li><code>object</code></li> <li><code>plant</code></li> </ul> <ul> <li><code>animal</code></li> <li><code>demon male</code></li> <li><code>divine female</code></li> <li><code>divine male</code></li> <li><code>human female</code></li> <li><code>human male</code></li> </ul> <p><code>{sungforcategory}</code> and <code>{sungbycategory}</code> are string parameters.</p>"},{"location":"api_rv/#response-parameters","title":"Response parameters","text":"<p>All the endpoints return a response in the following format:</p> <pre><code>{\n  \"mandal\": 0,\n  \"sukta\": 0,\n  \"meter\": \"string\",\n  \"sungby\": \"string\",\n  \"sungbycategory\": \"string\",\n  \"sungfor\": \"string\",\n  \"sungforcategory\": \"string\"\n}\n</code></pre> <p>Here's a description of these parameter.</p> <ul> <li><code>mandal</code>: The book number. Rig Veda has 10 books.</li> <li> <p><code>sukta</code>: The chapter number. Books contain chapters. The number of chapters in each book is different. For example, mandal 5 contains 87 suktas while mandal 4 contains 58. The highest value possible for this parameter is 191 (which is the number of suktas in the 1st and 10th mandals). The following table lists the number of chapters in each book.</p> Click to show/hide the table Mandal (book) Sukta (chapter) 1 191 2 43 3 62 4 58 5 87 6 75 7 104 8 103 9 114 10 191 </li> <li> <p><code>meter</code>: The poetic meter.</p> </li> <li><code>sungby</code>: The poet.</li> <li><code>sungbycategory</code>: The category of the poet. For a list of categories, see /poetcategory/{poetcategory}.</li> <li><code>sungfor</code>: The god.</li> <li><code>sungforcategory</code>: The category of the god. For a list of categories, see /godcategory/{sungforcategory}.</li> </ul>"},{"location":"api_rv/#live-sandbox","title":"Live sandbox","text":"<p>See Rig Veda API: Try it out.</p>"},{"location":"api_rv/#related","title":"Related","text":"<p>See Index.</p> <p></p>"},{"location":"api_vs/","title":"Vedic Society API","text":"<p>This API fetches the meanings of nouns from vedic literature.  The nouns are categorised as flora, fauna, geography, food, relationships, and more groups. The JSON response contains the word in Nagari script and transliterated roman script, the meaning, and the category.</p> <pre><code>[\n  {\n    \"category\": \"law\",\n    \"description\": \"thief\",\n    \"nagari\": \"\u0924\u093e\u092f\u0941\",\n    \"word\": \"tayu\"\n  }\n]\n</code></pre> <p>Timeout</p> <p>This API is offline since 28 Nov 2022, when Heroku pulled its free plan, and will remain offline till I find something else. The sandbox won't work, therefore.</p>"},{"location":"api_vs/#base-url","title":"Base URL","text":"<p><code>https://api-vs.herokuapp.com/vs/v2/</code></p>"},{"location":"api_vs/#methods","title":"Methods","text":"<p>Only <code>GET</code> calls are supported.</p> Example requestExample response <p>For the request parameters, see Endpoints.</p> <pre><code>curl -X 'GET' \\\n    'https://api-vs.herokuapp.com/vs/v2/words/ash' \\\n    -H 'accept: application/json'\n</code></pre> <p>For the response parameters, see Response parameters.</p> <pre><code>[\n  {\n    \"category\": \"law\",\n    \"description\": \"defendant, mentioned in the list of victims of purushmedh (human sacrifice)\",\n    \"nagari\": \"\u0905\u092d\u093f\u092a\u094d\u0930\u0936\u094d\u0928\u093f\u0928\",\n    \"word\": \"abhiprashnin\"\n  },\n  {\n    \"category\": \"plant\",\n    \"description\": \"Odina pinnata, Prosopis spicigera, or Mimosa suma\",\n    \"nagari\": \"\u0905\u091c\u0936\u0943\u0919\u094d\u0917\u0940\",\n    \"word\": \"ajashringi\"\n  },\n  ...\n]\n</code></pre>"},{"location":"api_vs/#endpoints","title":"Endpoints","text":"<p>All parameters are path parameters. To form the request URL, the endpoint must be appended to the base URL.</p> <pre><code>request URL = base URL + endpoint\n</code></pre> <p>The following endpoints are available. </p>"},{"location":"api_vs/#wordsword","title":"<code>/words/{word}</code>","text":"<p>Returns all nouns, transliterated from Sanskrit to the Roman script, that contains the specified word or phrase.  For example, <code>/words/shat</code> returns the entries for all words that contain <code>shat</code>, such as  <code>kshatriya</code>, <code>prishat</code>, or <code>shatapati</code>.</p> <p><code>{word}</code> is a string parameter.</p>"},{"location":"api_vs/#descriptionsdescription","title":"<code>/descriptions/{description}</code>","text":"<p>Returns all nouns where the meaning contains the specified phrase.  For example, <code>/descriptions/horse</code> returns all descriptions that contain the word <code>horse</code>.</p> <p>To get all nouns that contain <code>horse</code> (rather than all descriptions that contain <code>horse</code>), use the <code>words</code> parameter instead, and use a Sanskrit word for horse, such as <code>ashwa</code>.</p> <p><code>{description}</code> is a string parameter.</p>"},{"location":"api_vs/#categoriescategory","title":"<code>/categories/{category}</code>","text":"<p>Returns all nouns that belong to the specified category. The following categories are available.</p> Subject to explore Available categories Flora <code>grass</code>, <code>plant</code>, <code>tree</code> Fauna <code>animal</code>, <code>bird</code>, <code>cattle</code>, <code>fish</code>, <code>insect</code>, <code>snake</code>, <code>worm</code> Things <code>building</code>, <code>chariot</code>, <code>food</code>, <code>grain</code>, <code>metal</code>, <code>object</code>, <code>ship</code>, <code>weapon</code>, <code>war</code> Measurements <code>number</code>, <code>distance</code>, <code>time</code>, <code>weight</code> Geography <code>mountain</code>, <code>place</code>, <code>river</code> Knowledge <code>astronomy</code>, <code>disease</code>, <code>literature</code>, <code>medicine</code>, <code>poison</code>, <code>subject</code> Entertainment <code>dicing</code>, <code>games</code>, <code>music</code> Toilette <code>clothing</code>, <code>hair</code>, <code>ornament</code> Legal <code>law</code>, <code>morals</code> Societal <code>agriculture</code>, <code>caste</code>, <code>family</code>, <code>occupation</code>, <code>priest</code>, <code>royalty</code>, <code>trade</code>, <code>tribe</code> <p>For example, <code>/categories/clothing</code> returns all nouns that are tagged as an item of clothing.</p> <p>A noun can belong to more than one category. For example, <code>aj</code> is both an <code>animal</code> and the name of a <code>tribe</code>.</p> <p><code>{category}</code> is a string parameter.</p>"},{"location":"api_vs/#response-parameters","title":"Response parameters","text":"<p>All the endpoints return a response in the following format:</p> <pre><code>{\n  \"nagari\": \"string\",\n  \"word\": \"string\",\n  \"description\": \"string\",\n  \"category\": \"string\"\n}\n</code></pre> <p>The <code>word</code>, <code>description</code>, and <code>category</code> parameters are already described in Endpoints. Here's a description of the <code>nagari</code> parameter.</p> <ul> <li><code>nagari</code>: The word itself in Sanskrit, represented in the Nagari script. For example, <code>\u0905\u091c\u0936\u0943\u0919\u094d\u0917\u0940</code>.</li> </ul>"},{"location":"api_vs/#live-sandbox","title":"Live sandbox","text":"<p>See Vedic Society API: Try it out.</p>"},{"location":"api_vs/#related","title":"Related","text":"<p>See Index.</p> <p></p>"},{"location":"datavis_meters_pie/","title":"Pie chart: Poetic meters","text":"<p>Poetry is always meant to rendered aloud and, during its recitation, it's the meter that sets its rhythm. Consider the following example, and read it out aloud. Your vocals will, in all probability, follow the pattern shown on the second content tab. </p> No marksStress points marked with <code>/</code> <p>Poem, when read silently as text</p> <pre><code>In the midst of the word he was trying to say,\nIn the midst of his laughter and glee,\nHe had softly and suddenly vanished away\nFor the Snark was a Boojum, you see.\n\n- Carrol, Lewis. \"The Hunting of the Snark\".\n</code></pre> <p>Poem, showing the places where the sound has greater stress </p> <pre><code>In the midst / of the word / he was try/ing to say,\nIn the midst/ of his laugh/ter and glee,\nHe had soft/ly and sud/den ly van/ ish ed away\nFor the Snark / was a Boo/jum, you see.\n\n- Carrol, Lewis. \"The Hunting of the Snark\".\n</code></pre> <p>Rig Veda is poetry. Its verses have a certain lilt, beat, rhythm, and meter that turn the words into charming lyrical music when recited aloud. Stressing the incorrect syllable can alter the entire meaning of a mantra. Traditional methods, transmitted orally, teach people which parts of a word must be stressed. In these modern times, printed books also carry this information.  See, for example, this verse, with and without marks on the stress points.</p> No marksMarked with <code>'</code> <pre><code>\u0924\u0924\u094d\u0938\u0935\u093f\u0924\u0941\u0930\u094d\u0935\u0930\u0947\u0923\u094d\u092f\u0902 \u092d\u0930\u094d\u0917\u094b \u0926\u0947\u0935\u0938\u094d\u092f \u0927\u0940\u092e\u0939\u093f \u0964\n\u0927\u093f\u092f\u094b \u092f\u094b \u0928\u0903 \u092a\u094d\u0930\u091a\u094b\u0926\u092f\u093e\u0924\u094d \u0965\n\n- Rig Veda, 3.62.10\n</code></pre> <pre><code>\u0924\u0924\u094d\u0938\u0951\u0935\u093f\u0952\u0924\u0941\u0930\u094d\u0935\u0930\u0947\u0951\u0923\u094d\u092f\u0902\u0952 \u092d\u0930\u094d\u0917\u094b\u0951 \u0926\u0947\u0952\u0935\u0938\u094d\u092f\u0951 \u0927\u0940\u092e\u0939\u093f \u0964\n\u0927\u093f\u092f\u094b\u0952 \u092f\u094b \u0928\u0903\u0951 \u092a\u094d\u0930\u091a\u094b\u0952\u0926\u092f\u093e\u0951\u0924\u094d \u0965\n\n- Rig Veda, 3.62.10\n</code></pre> <p>This tutorial shows you how to draw a piechart of the vedic meters.</p> <p></p>","tags":["Rig Veda API","Data visualisation"]},{"location":"datavis_meters_pie/#algorithm","title":"Algorithm","text":"<p>All the path parameters in the Rig Veda API return a response in the same JSON structure.</p> <pre><code>{\n  \"mandal\": 0,\n  \"sukta\": 0,\n  \"meter\": \"string\",\n  \"sungby\": \"string\",\n  \"sungbycategory\": \"string\",\n  \"sungfor\": \"string\",\n  \"sungforcategory\": \"string\"\n}\n</code></pre> <p>In Rig Veda, books (or mandals) contain chapters, and chapters (or suktas) contain verses. Each verse is composed in one - and only one - meter.</p> <p>Entity relationship</p> <p>For information on how mandals, suktas, poets, and gods are connected to each other, see the entity-relationship diagram at About Rig Veda.</p> <p>The following pseudocode uses the <code>/book/{mandal}</code> path parameter to fetch the data for meters, and generate the label names and numbers for a pie chart.</p> <pre><code>while book_number &lt; 11:\n    GET /book/book_number\n    for entry in GET_response:\n        add &lt;meter&gt; to meter_list\n    book_number = book_number + 1\ncount (&lt;meter&gt; in meter_list)\ncount (sum of occurence of &lt;meter&gt; in meter_list)\nplot chart:\n    labels = &lt;meter&gt;\n    sizes = sum of occurence\n</code></pre> <p>After collecting the data, use your favourite data-visualiser to create a pie chart. The following example code uses the <code>matplotlib</code> Python package.</p>","tags":["Rig Veda API","Data visualisation"]},{"location":"datavis_meters_pie/#example-code-in-python","title":"Example code in Python","text":"<ol> <li> <p>Make a <code>GET</code> call for the first mandal.</p> <pre><code>headers = {\n    'accept': 'application/json',\n}\n\nurl = \"https://api-rv.herokuapp.com/rv/v2/meta/book/1\"\n\nimport json\n\nresponse = requests.get(url, headers=headers)\nresponse_json = json.loads(json.dumps(response.json()))\n</code></pre> </li> <li> <p>Loop through the returned JSON, pick <code>meter</code>, and add it to a list.</p> <pre><code>meters = []\n\nfor entry in response_json:\n    meters.append(entry['meter'])\n</code></pre> </li> <li> <p>Make a <code>GET</code> call for mandals 2 through 10, pick the meters, and append them to the <code>meters</code> list.</p> </li> <li> <p>Count the number of occurence of each meter.</p> <pre><code>from collections import Counter\n\ncounts = Counter(meters)\n#print(len(counts), counts)\n</code></pre> </li> <li> <p>From the counter dictionary, extract the meter names and numbers. Then, use the <code>matplotlib</code> library to draw the pie chart.</p> <pre><code>labels = []\nsizes = []\nfor item in counts:\n#    print(item, counts[item])\n    labels.append(item)\n    sizes.append(counts[item])\n#print(len(labels), labels)\n#print(len(sizes), sizes)\n\nimport matplotlib.pyplot as plt\n\nfig1, ax1 = plt.subplots()\nax1.pie(sizes, labels=labels, autopct='%1.1f%%', shadow=True, startangle=90)\nax1.axis('equal')\nplt.show()\n</code></pre> </li> </ol>","tags":["Rig Veda API","Data visualisation"]},{"location":"datavis_meters_pie/#results","title":"Results","text":"<p>You should be able to see a pie chart like this:</p> <p></p> <p>As you can see, a bunch of meters are so small that they have tiny slices in the pie and their names form a blur of overwritten text. One option for getting a neater chart is to club all such tiny slices together into one larger slice. In the following code snippet, all slices that are smaller than 3% of the total are clubbed into one slice.</p> <pre><code>labels = []\nsizes = []\nothers = 0\nfor item in counts:\n#   print(item, counts[item])\n    if int(counts[item])/total &gt; 0.03:\n        labels.append(item)\n        sizes.append(counts[item])\n    else:\n        others = others + int(counts[item])\n#   print(len(labels), labels)\n#   print(len(sizes), sizes)\n    labels.append(\"Others\")\n    sizes.append(others)\n#   print(len(labels), labels)\n#   print(len(sizes), sizes)\n</code></pre>","tags":["Rig Veda API","Data visualisation"]},{"location":"datavis_meters_pie/#what-to-do-next","title":"What to do next","text":"<p>You can generate similar piecharts of the gods in a mandal, or all gods in all mandals, or a specific god in all mandals. Ditto for the poets.</p> Pie chart, godsPie chart, poetsPie chart, god categories <p></p> <p></p> <p></p>","tags":["Rig Veda API","Data visualisation"]},{"location":"datavis_meters_pie/#more-howto-s","title":"More HowTo-s","text":"<p>See Index.</p> <p></p>","tags":["Rig Veda API","Data visualisation"]},{"location":"datavis_wordcloud/","title":"Word cloud: Noun descriptions","text":"<p>A word cloud is an image composed of words in a book or large piece of text, where the size of the words in the image is indicative of their frequency of occurence in the text. </p> <p>This tutorial shows you how to use the noun descriptions in the Vedic Society API to generate a word cloud.</p>","tags":["Vedic Society API","Data visualisation"]},{"location":"datavis_wordcloud/#algorithm","title":"Algorithm","text":"<p>All the path parameters in the Vedic Society API return a response in the same JSON structure.</p> <pre><code>{\n  \"nagari\": \"string\",\n  \"word\": \"string\",\n  \"description\": \"string\",\n  \"category\": \"string\"\n}\n</code></pre> <p>To create the corpus for the word cloud, you need the values from all the <code>description</code> parameters. To do so, you use the <code>categories/{category}</code> path parameter, and fetch the words for all categories one by one. </p> <p>The following pseudocode shows how to generate the corpus.</p> <pre><code>category_list = [category1, category2, category3, ...]\nwhere /categories/{category} == &lt;item from category_list&gt;:\n    get description\n    append to word_list\nconvert word_list to word_text\n</code></pre> <p>After generating the corpus, use your favourite data-visualiser to create a word cloud. The following example code uses the WordCloud for Python package.</p>","tags":["Vedic Society API","Data visualisation"]},{"location":"datavis_wordcloud/#example-code-in-python","title":"Example code in Python","text":"<p>This example uses the WordCloud for Python package.</p> <ol> <li> <p>Create a list of categories available in the API.</p> <pre><code>category_list = [..., mountain, place, river, ...]\n</code></pre> </li> <li> <p>Make a <code>GET</code> call for the first item in <code>category_list</code>. For example, the following code shows a call for the <code>clothing</code> category.</p> <pre><code>headers = {\n    'accept': 'application/json',\n}\n\nurl = \"https://api-vs.herokuapp.com/vs/v2/categories/clothing\"\n\nresponse = requests.get(url, headers=headers)\nresponse_json = json.loads(json.dumps(response.json()))\n</code></pre> </li> <li> <p>Loop through the returned JSON, pick <code>description</code>, and add it to a list.</p> <pre><code>word_list = []\n\nfor entry in response_json:\n    word_list.append(entry['description'])\n</code></pre> </li> <li> <p>Make a <code>GET</code> call for the next category on the list, pick the description, and append it to <code>word_list</code>.</p> </li> <li> <p>Convert the list to a single block of text, where each list item is separated by a single space.</p> <pre><code>text = \" \".join(word_list)\n</code></pre> </li> <li> <p>Use <code>pip</code> to install the <code>wordcloud</code> package in your environment, and then use the following code to create the word cloud.</p> <pre><code># generate a word cloud image\nwordcloud = WordCloud().generate(text)\n\n# lower max_font_size\nwordcloud = WordCloud(max_font_size=40).generate(text)\n\n# plot the chart\nplt.figure()\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.show()\n</code></pre> </li> </ol>","tags":["Vedic Society API","Data visualisation"]},{"location":"datavis_wordcloud/#results","title":"Results","text":"<p>You should be able to see a pie chart like this:</p> <p></p>","tags":["Vedic Society API","Data visualisation"]},{"location":"datavis_wordcloud/#what-to-do-next","title":"What to do next","text":"<p>You can generate similar word clouds for the several categories separately.</p>","tags":["Vedic Society API","Data visualisation"]},{"location":"datavis_wordcloud/#more-howto-s","title":"More HowTo-s","text":"<p>See Index.</p> <p></p>","tags":["Vedic Society API","Data visualisation"]},{"location":"how_to_curse/","title":"HowTo: Vedic curses","text":"<p>A curse is a word or phrase that's uttered with complete seriousness, with the intention to invoke a supernatural power that can cause harm or injury to someone or something.</p> <p>Curses are born of human emotions and, therefore, are as old as humanity itself. The vedas, which are among the oldest text in a Indo-European language, contain interesting curses (in addition to the solemn hymns to gods, for which they're better known).  Atharva Veda is, in fact, more a compendium of curses than of grateful hymns to gods. Here's an example curse from Atharva Veda.</p> <pre><code>Whoever shall curse us not cursing, \nAnd whoever shall curse us cursing, \nLike a tree smitten by a thunderbolt, \nLet him dry up from the root.\n\n- Atharva Veda, 7.59\n</code></pre> <p>This tutorial shows you how to curse like you were living in the vedic times.</p>","tags":["Vedic Society API","Tutorial"]},{"location":"how_to_curse/#algorithm","title":"Algorithm","text":"<p>All the path parameters in the Vedic Society API return a response in the same JSON structure.</p> <pre><code>{\n  \"nagari\": \"string\",\n  \"word\": \"string\",\n  \"description\": \"string\",\n  \"category\": \"string\"\n}\n</code></pre> <p>First, you find words from those categories that have an element of evil or of suffering in them (for example, <code>snake</code>, <code>worm</code>, or <code>poison</code>). And then, you string those words together to form sentences. </p> <p>The following pseudocode uses the <code>disease</code> and <code>family</code> categories to create a curse.</p> <pre><code>where /categories/{category} == 'disease':\n    get word\n    get description\nwhere /categories/{category} == 'family':\n    get word\n    get description\ncurse = 'May your ' + &lt;family_word&gt; + ' be blighted with ' + &lt;disease_word&gt; + '.\n</code></pre>","tags":["Vedic Society API","Tutorial"]},{"location":"how_to_curse/#example-code-in-python","title":"Example code in Python","text":"<ol> <li> <p>Make a <code>GET</code> call for words in the <code>disease</code> category.</p> <pre><code>headers = {\n    'accept': 'application/json',\n}\n\nurl = \"https://api-vs.herokuapp.com/vs/v2/categories/disease\"\n\nresponse = requests.get(url, headers=headers)\nresponse_json = json.loads(json.dumps(response.json()))\n</code></pre> </li> <li> <p>Loop through the returned JSON, and append the values of the <code>word</code> and <code>description</code> parameters to a dictionary.</p> <pre><code>import json\ndiseases = {}\n\nfor entry in response_json:\n    diseases.update({entry['word']:entry['description']})\n</code></pre> </li> <li> <p>Repeat the two previous steps to generate a similar dictionary for families.</p> <ol> <li>Make a <code>GET</code> call for words in the <code>family</code> category.</li> <li>Make a dictionary for the values of the <code>word</code> and <code>description</code> parameters.</li> </ol> </li> <li> <p>Pick a random entry from both the dictionaries. You'll use these entries to compose a sentence.</p> <pre><code>import random\ndisease, disease_meaning = random.choice(list(diseases.items()))\nfamily, family_meaning = random.choice(list(families.items()))\n</code></pre> </li> <li> <p>Compose the curse. Here's an example:</p> <pre><code>curse = 'May your ' + family + ' be blighted with ' + disease + '.'\n</code></pre> </li> </ol>","tags":["Vedic Society API","Tutorial"]},{"location":"how_to_curse/#results","title":"Results","text":"<p>You should now be able to see a random curse like this:</p> <pre><code>May your didhishu be blighted with suram.\n</code></pre>","tags":["Vedic Society API","Tutorial"]},{"location":"how_to_curse/#what-to-do-next","title":"What to do next","text":"<p>Maybe make the curses multilingual? If you also pick the <code>nagari</code> parameter when looping through the JSON data, you can generate curses like this:</p> <pre><code>May your \u092c\u093e\u0932  be blighted with \u0905\u0930\u094d\u0936\u0938.\n\u092c\u093e\u0932 = bal (boy)\n\u0905\u0930\u094d\u0936\u0938 = arshas (haemorrhoids)\n</code></pre> <p>Or, maybe make the curses more colourful? You could compose entire verses by picking random entries from the following categories: <code>snake</code>, <code>worm</code>, <code>insect</code>, <code>weapon</code>, <code>medicine</code>, <code>poison</code>.</p>","tags":["Vedic Society API","Tutorial"]},{"location":"how_to_curse/#more-howto-s","title":"More HowTo-s","text":"<p>See Index.</p> <p></p>","tags":["Vedic Society API","Tutorial"]},{"location":"how_to_dialogues/","title":"HowTo: Vedic dialogues","text":"<p>A dialogue is a conversation between two or more people in a book, play, or film. Sometimes, countries also have dialgues amongst themselves, and these instances too can be said to belong to a play or film. Here is an example each.</p> Normal human dialogueNations dialoguing <pre><code>Bertie: Tell me, Jeeves, were you always like this, or did it come on suddenly?\nJeeves: Sir? \nBertie: The brain, the grey matter. Were you an outstandingly brilliant child?\nJeeves: My mother thought me intelligent, Sir. \nBertie: Well, you can't go by that! My mother thought me intelligent!\n\n- Woodehouse, P. G. \"Very Good, Jeeves\".\n</code></pre> <pre><code>We have agreed that a conference of United Nations should be called\nto meet at San Francisco in the United States on April 25, 1945, \nto prepare the charter of such an organization, along the lines proposed \nin the informal conversations at Dumbarton Oaks.\n\nThe Government of China and the Provisional Government of France \nwill be immediately consulted and invited to sponsor invitations to \nthe conference jointly with the Governments of the United States, \nGreat Britain, and the Union of Soviet Socialist Republics. \n\nAs soon as the consultation with China and France has been completed, \nthe text of the proposals on voting procedure will be made public.\n\n- Yalta Conference Agreement, 1945\n</code></pre> <p>Rig Veda doesn't contain conversations between countries, but it does contain human conversations.  This tutorial shows you how to find (and read) these conversations.</p>","tags":["Rig Veda API","Tutorial"]},{"location":"how_to_dialogues/#algorithm","title":"Algorithm","text":"<p>All the path parameters in the Rig Veda API return a response in the same JSON structure.</p> <pre><code>{\n  \"mandal\": 0,\n  \"sukta\": 0,\n  \"meter\": \"string\",\n  \"sungby\": \"string\",\n  \"sungbycategory\": \"string\",\n  \"sungfor\": \"string\",\n  \"sungforcategory\": \"string\"\n}\n</code></pre> <p>In Rig Veda, books (or mandals) contain chapters, and chapters (or suktas) contain verses. If a sukta has more than one verse, and if the poets are different in these verses, it's fair to assume that the sukta is a conversation between these poets.</p> <p>Entity relationship</p> <p>For information on how mandals, suktas, poets, and gods are connected to each other, see the entity-relationship diagram at About Rig Veda.</p> <p>The following algorithm uses the <code>/book/{mandal}</code> path parameter to identify such suktas.</p> <ol> <li>Fetch all the verses in a mandal.</li> <li> <p>For each verse, make a <code>sukta</code>-<code>sungby</code> string and add it to a list.</p> <pre><code>...\n8-Trishira Tvashtra\n9-Trishira Tvashtra\n9-Trishira Tvashtra\n10-Yami Vaivasvati\n10-Yama Vaivasvat\n11-Havirdhan Angi\n11-Havirdhan Angi\n...\n</code></pre> </li> <li> <p>Clean this list of duplicates.</p> <pre><code>...\n8-Trishira Tvashtra\n9-Trishira Tvashtra\n10-Yami Vaivasvati\n10-Yama Vaivasvat\n11-Havirdhan Angi\n...\n</code></pre> </li> <li> <p>Iterate over this list to find instances where the same <code>sukta</code> occurs more than once (that is, the same <code>sukta</code> is tagged to more than one <code>sungby</code>). These are the verses that have more than one poet.</p> <pre><code>...\n10-Yami Vaivasvati\n10-Yama Vaivasvat\n...\n</code></pre> </li> </ol>","tags":["Rig Veda API","Tutorial"]},{"location":"how_to_dialogues/#example-code-in-python","title":"Example code in Python","text":"<p>These steps use the <code>/book/{mandal}</code> path parameter.</p> <ol> <li> <p>Make a <code>GET</code> call for any mandal. The following example makes a call to the first mandal.</p> <pre><code>headers = {\n    'accept': 'application/json',\n}\n\nurl = \"https://api-rv.herokuapp.com/rv/v2/meta/book/1\"\n\nimport json\n\nresponse = requests.get(url, headers=headers)\nresponse_json = json.loads(json.dumps(response.json()))\n</code></pre> </li> <li> <p>Loop through the returned JSON and find the number of verses in the mandal. You'll use this number to run a counter in a later step.</p> <pre><code>sukta_numbers = []\n\nfor entry in response_json:\n    sukta_numbers.append(entry['sukta'])\nnumber_of_suktas = max(sukta_numbers)\nnumber_of_suktas = max(sukta_numbers)\nprint(\"mandal\", mandal, \"has\", number_of_suktas, \"suktas\")\n</code></pre> </li> <li> <p>Loop through the returned JSON again, pick <code>sukta</code> and <code>sungby</code>, and add them to a list. This is the list of all verses_by_poets in the mandal.</p> <pre><code>poet_list = []\n\nfor entry in response_json:\n    for entry in entry_full:\n    text = str(entry['sukta']) + \"-\" + entry['sungby']\n    poet_list.append(text)\n#print(\"poet list\", len(poet_list), poet_list)\n</code></pre> </li> <li> <p>Clean the result list of duplicate entries. Because, the same poet might have sung all verses in a sukta, but if there are 5 verses in the sukta, the list will have 5 entries.</p> <pre><code>unique = []\nduplicates = []\nfor entry in poet_list:\n    if entry in unique:\n        duplicates.append(entry)\n    else:\n        unique.append(entry)\n</code></pre> </li> <li> <p>Iterate over this clean list, and pick the verses that have more than one entry. These are the dialogue verses.</p> <pre><code>print(\"==========================\")\nprint(\"mandal \" + str(mandal) + \" conversations\")\nprint(\"==========================\")\ncounter = 1\nconversation_count = 0\nwhile counter &lt;= number_of_suktas:\n    text_to_search = str(counter) + '-'\n    conversation = sum(word.startswith(text_to_search) for line in unique for word in line.split())\n    if conversation &gt; 1:\n        print(conversation, \"poets in sukta\", counter)\n        conversation_count = conversation_count + 1\n    counter = counter + 1\nif conversation_count == 0:\nprint(\"No conversations in this book\")\n</code></pre> </li> </ol>","tags":["Rig Veda API","Tutorial"]},{"location":"how_to_dialogues/#results","title":"Results","text":"<p>You now have a list of the dialogue verses in the mandal.</p> Mandal has dialogue hymnsMandal doesn't have dialogue hymns <pre><code>mandal 1 has 191 suktas\n==========================\nmandal 1 conversations\n==========================\n5 poets in sukta 100\n3 poets in sukta 126\n3 poets in sukta 165\n2 poets in sukta 170\n3 poets in sukta 179\n</code></pre> <pre><code>mandal 6 has 75 suktas\n==========================\nmandal 6 conversations\n==========================\nNo conversations in this book\n</code></pre>","tags":["Rig Veda API","Tutorial"]},{"location":"how_to_dialogues/#what-to-do-next","title":"What to do next","text":"<p>Read the verse, maybe? Wikisource is good resource for ancient texts, so you can go read the poems there. The URLs at Wikisource are in the following format: <code>https://en.wikisource.org/wiki/The_Rig_Veda/Mandala_1/Hymn_2</code>. Therefore, compose the URLs to match this scheme, and look up the verses.</p>","tags":["Rig Veda API","Tutorial"]},{"location":"how_to_dialogues/#obiter-dicta","title":"Obiter dicta","text":"<p>My favourite conversation in Rig Veda is in the tenth mandal and contained in chapter 95: https://en.wikisource.org/wiki/The_Rig_Veda/Mandala_10/Hymn_95.</p> <p>It's a conversation between a king named Pururava Aila and his queen Urvashi.</p>","tags":["Rig Veda API","Tutorial"]},{"location":"how_to_dialogues/#more-howto-s","title":"More HowTo-s","text":"<p>See Index.</p> <p></p>","tags":["Rig Veda API","Tutorial"]},{"location":"how_to_soliloquy/","title":"HowTo: Vedic soliloquies","text":"<p>A soliloquy is an act of speaking one's thoughts aloud when alone, or regardless of any listeners, especially by a character in a play. When directed to any listeners, a soliloquy is called a monologue. Here is an example each.</p> SoliloquyMonologue <pre><code>Is this a dagger which I see before me,\nThe handle toward my hand? Come, let me clutch thee.\nI have thee not, and yet I see thee still.\nArt thou not, fatal vision, sensible\nTo feeling as to sight? or art thou but\nA dagger of the mind, a false creation,\nProceeding from the heat-oppressed brain?\n\nShakespeare, William. \"Macbeth\". \n</code></pre> <pre><code>I speak not to disprove what Brutus spoke,\nBut here I am to speak what I do know.\nYou all did love him once, not without cause:\nWhat cause withholds you then, to mourn for him?\nO judgment! thou art fled to brutish beasts,\nAnd men have lost their reason. Bear with me;\nMy heart is in the coffin there with Caesar,\nAnd I must pause till it come back to me.\n\nShakespeare, William. \"Julius Caesar\".\n</code></pre> <p>Soliloquies and monologues are as old as humankind. People were speaking to themselves, and speaking without waiting for a response, ever since they started speaking. Rig Veda, possibly the oldest book in the world, also has people soliloquising and monologising.</p> <p>This tutorial shows you how to find (and read) the soliloquies and monologues in Rig Veda.</p>","tags":["Rig Veda API","Tutorial"]},{"location":"how_to_soliloquy/#algorithm","title":"Algorithm","text":"<p>All the path parameters in the Rig Veda API return a response in the same JSON structure.</p> <pre><code>{\n  \"mandal\": 0,\n  \"sukta\": 0,\n  \"meter\": \"string\",\n  \"sungby\": \"string\",\n  \"sungbycategory\": \"string\",\n  \"sungfor\": \"string\",\n  \"sungforcategory\": \"string\"\n}\n</code></pre> <p>Because you're interested in people talking to themselves, you need the verses where <code>sungby</code> is the same as <code>sungfor</code>. To do so, you can use any of the path parameters to get all verses in all books, and then programmatically extract only those verses where the poet is the same as the god.</p> <p>Entity relationship</p> <p>For information on how mandals, suktas, poets and gods are connected to each other, see the entity-relationship diagram at About Rig Veda.</p> <p>The steps for getting this filtered list verses will depend on the path parameter that you use. The following pseudocodes show the steps with 3 different path parameters.</p> /book/{mandal}/poetcategory/{poetcategory}/godcategory/{sungforcategory} <p>Use the <code>/book/{mandal}</code> path parameter.</p> <ol> <li>Start a counter from 1.</li> <li>Create an empty list to store the results.</li> <li>Get all verses of the mandal, where <code>{mandal}</code> is equal to the counter value.</li> <li>Loop through the returned JSON and find verses where <code>sungby</code> is the same as <code>sungfor</code>. Append those verses to the list.</li> <li>Increase the counter by 1.</li> <li>Repeat the previous steps till counter value is 11.</li> <li>Remove duplicate entries from the list.</li> <li>Iterate over this list, pick the mandal and sukta number combination, and use your favourite search engine to look up the poem.</li> </ol> <p>Use the <code>/poetcategory/{poetcategory}</code> path parameter.</p> <ol> <li>Create a list where the list items are the available categories.</li> <li>Create an empty list to store the results.</li> <li>Loop through the category list to get all verses where <code>{poetcategory}</code> is equal to the category list item.</li> <li>Loop through the returned JSON and find verses where <code>sungby</code> is the same as <code>sungfor</code>. Append those verses to the empty list.</li> <li>Pick up the next item from the category list, and repeat steps 2, 3, and 4.</li> <li>Repeat the previous steps till there are no more items in the category list.</li> <li>Remove duplicate entries from the generated result list.</li> <li>Iterate over this list, pick the mandal and sukta number combination, and use your favourite search engine to look up the poem.</li> </ol> <p>Use the <code>/godcategory/{sungforcategory}</code> path parameter.</p> <p>The steps are the same as that for the <code>/poetcategory/{poetcategory}</code>. The only difference is, in step 1, the available categories in the <code>/godcategory/{sungforcategory}</code> list is different from the ones in <code>/poetcategory/{poetcategory}</code>.</p>","tags":["Rig Veda API","Tutorial"]},{"location":"how_to_soliloquy/#example-code-in-python","title":"Example code in Python","text":"<p>These steps use the <code>/poetcategory/{poetcategory}</code> path parameter.</p> <ol> <li> <p>Create a list of all available categories.</p> <pre><code>categories = [\"animal\", \"demon male\", \"divine female\", \"divine male\", \"human female\", \"human male\"]\n</code></pre> </li> <li> <p>Iterate over this list and make a <code>GET</code> call for each category to the <code>/poetcategory/{poetcategory}</code> path parameter.</p> <pre><code>headers = {\n    'accept': 'application/json',\n}\n\nurl_suffix = \"https://api-rv.herokuapp.com/rv/v2/meta/poetcategory/\"\n\nimport json\nfor item in category:\n    url = url_suffix + item\n    response = requests.get(url, headers=headers)\n    response_json = json.loads(json.dumps(response.json()))\n</code></pre> </li> <li> <p>Loop through the returned JSON and find verses where <code>sungby</code> is the same as <code>sungfor</code>. Append those verses to the result list.</p> <pre><code>soliloquy = []\n\nfor entry in response_json:\n    if entry['sungby'] == entry['sungfor']:\n        soliloquy.append(entry)\n</code></pre> </li> <li> <p>Clean the result list of duplicate entries.</p> <pre><code>soliloquy_unique = []\n\nfor entry in soliloquy:\n   if entry in soliloquy_unique:\n       continue\n   else:\n       soliloquy_unique.append(entry)\n</code></pre> </li> <li> <p>Iterate over this list, pick the mandal and sukta number combination, and look up the poem.</p> </li> </ol> <p>Wikisource is good resource for ancient texts, so you can go read the poems there. The URLs at Wikisource are in the following format: <code>https://en.wikisource.org/wiki/The_Rig_Veda/Mandala_1/Hymn_2</code>. Therefore, compose the URLs to match this scheme.</p> <pre><code>```python\nfor item in soliloquy_unique:\n    poem = \"Mandala_\" + str(item['mandal']) + \"/Hymn_\" + str(item['sukta'])\n    poem_list.append(poem)\n\nfor item in poem_list:\n    url = url_suffix + item\n    print(url)\n```\n</code></pre>","tags":["Rig Veda API","Tutorial"]},{"location":"how_to_soliloquy/#results","title":"Results","text":"<p>You now have a list of URLs for the soliloquies and monologues in Rig Veda.</p> <pre><code>https://en.wikisource.org/wiki/The_Rig_Veda/Mandala_10/Hymn_159\nhttps://en.wikisource.org/wiki/The_Rig_Veda/Mandala_10/Hymn_48\nhttps://en.wikisource.org/wiki/The_Rig_Veda/Mandala_10/Hymn_49\nhttps://en.wikisource.org/wiki/The_Rig_Veda/Mandala_10/Hymn_50\nhttps://en.wikisource.org/wiki/The_Rig_Veda/Mandala_10/Hymn_53\nhttps://en.wikisource.org/wiki/The_Rig_Veda/Mandala_10/Hymn_79\nhttps://en.wikisource.org/wiki/The_Rig_Veda/Mandala_10/Hymn_80\nhttps://en.wikisource.org/wiki/The_Rig_Veda/Mandala_10/Hymn_124\nhttps://en.wikisource.org/wiki/The_Rig_Veda/Mandala_10/Hymn_140\nhttps://en.wikisource.org/wiki/The_Rig_Veda/Mandala_10/Hymn_125\nhttps://en.wikisource.org/wiki/The_Rig_Veda/Mandala_4/Hymn_42\nhttps://en.wikisource.org/wiki/The_Rig_Veda/Mandala_10/Hymn_119\nhttps://en.wikisource.org/wiki/The_Rig_Veda/Mandala_10/Hymn_139\n\nProcess finished with exit code 0\n</code></pre>","tags":["Rig Veda API","Tutorial"]},{"location":"how_to_soliloquy/#what-to-do-next","title":"What to do next","text":"<p>Maybe read the poem in the original Sanskrit?</p> <p>Wikisource has a Sanskrit site as well, and the URL format for Rig Veda is like this: <code>https://sa.wikisource.org/wiki/\u090b\u0917\u094d\u0935\u0947\u0926\u0903_\u0938\u0942\u0915\u094d\u0924\u0902_\u0967.\u0968</code>.</p> <p>You can see that the numerals need to be in the Nagari script. So, you'd have to convert the Arabic numerals to Nagari, append them to the URL, and read the poems.</p>","tags":["Rig Veda API","Tutorial"]},{"location":"how_to_soliloquy/#obiter-dicta","title":"Obiter dicta","text":"<p>My favourite poem on this list is this one: https://en.wikisource.org/wiki/The_Rig_Veda/Mandala_10/Hymn_125.</p> <p>This is the metadata for this poem:</p> <pre><code>sung by and for: Vagambhrini\ncategory of singer: Human female\nmeters: Jagati and Trishtup\n</code></pre> <p>Sanskrit version: https://sa.wikisource.org/wiki/\u090b\u0917\u094d\u0935\u0947\u0926\u0903_\u0938\u0942\u0915\u094d\u0924\u0902_\u0967\u0966.\u0967\u0968\u096b .</p> <p>A musical rendering:</p>","tags":["Rig Veda API","Tutorial"]},{"location":"how_to_soliloquy/#more-howto-s","title":"More HowTo-s","text":"<p>See Index.</p> <p></p>","tags":["Rig Veda API","Tutorial"]},{"location":"common/coffee/","title":"Coffee","text":""},{"location":"common/timeout/","title":"Timeout","text":"<p>Timeout</p> <p>This API is offline since 28 Nov 2022, when Heroku pulled its free plan, and will remain offline till I find something else. The sandbox won't work, therefore.</p>"},{"location":"common/timeout_old/","title":"Timeout old","text":"<p>Timeout</p> <p>This API is offline every night between 9:00 PM IST and 9:00 AM IST.</p>"},{"location":"tags/","title":"Index","text":""},{"location":"tags/#data-visualisation","title":"Data visualisation","text":"<ul> <li>Pie chart of vedic metres</li> <li>Word cloud of noun descriptions</li> </ul>"},{"location":"tags/#rig-veda-api","title":"Rig Veda API","text":"<ul> <li>Pie chart of vedic metres</li> <li>Vedic dialogues</li> <li>Vedic soliloquies</li> </ul>"},{"location":"tags/#tutorial","title":"Tutorial","text":"<ul> <li>Vedic curses</li> <li>Vedic dialogues</li> <li>Vedic soliloquies</li> </ul>"},{"location":"tags/#vedic-society-api","title":"Vedic Society API","text":"<ul> <li>Word cloud of noun descriptions</li> <li>Vedic curses</li> </ul>"}]}